#!/usr/bin/env python3

import os
from dataclasses import dataclass, field
from typing import *
from subprocess import check_output
from re import sub


def ask_for_variable(match_object, variables={}):
    """This function is called in a regex sub. Note that it relies on the fact that
    the 'variables' dictionary is persistent."""
    variable = match_object.group(1)

    if variable not in variables:
        answer = input(variable.capitalize() + ": ")
        variables[variable] = answer

    return variables[variable]


def ask_for_condition(condition: str, conditions={}):
    """Ask the user for a condition."""
    if condition in conditions:
        return conditions[condition]

    out = None
    while out not in ("y", "n"):
        out = input(condition.capitalize() + "? [y/n]: ")

    conditions[condition] = out == "y"
    return conditions[condition]


class NamedList(List):
    """A class representing a list with a name."""

    def __init__(self, name):
        super().__init__(self)

        self.name = name


name = "tolige.config"
base = os.path.dirname(os.path.realpath(__file__))

lists = []
with open(os.path.join(base, name), "r") as f:
    current_list = None

    for i, line in enumerate(f.read().splitlines()):
        stripped_line = line.strip()

        # skip comments and empty lines
        if stripped_line.startswith("#") or len(stripped_line) == 0:
            continue

        # add a line (only right-stripped, since it could be tab-indented, which is ok)
        elif not line[0].isalpha():
            if current_list is None:
                exit(f"ERROR on line {i}: List name missing.")

            current_list.append(line.rstrip())

        # else create a new list (and possibly add the old one)
        else:
            if current_list is not None:
                lists.append(current_list)

            current_list = NamedList(stripped_line)

# add the remaining set
if current_list is not None:
    lists.append(current_list)
else:
    exit("ERROR: No lists parsed, add some before running the script.")

print("Parsed lists")
print("------------")
for i, set in enumerate(lists):
    print(f"{i}: {set.name}")
print()


selection = [number.strip() for number in input("Select: ").split(",")]

selected_lists = (
    [str(i) for i in range(len(lists))]
    if "*" in selection  # special * for all lists
    else selection
)


for number in selected_lists:
    # check that the number is actually a number
    if not all(d.isdigit() for d in number):
        exit(f"ERROR: '{number}' is not an integer.")

    number = int(number)

    # check range
    if not number < len(lists):
        exit(f"ERROR: {number} is out of range.")

    i = 0
    while i < len(lists[number]):
        # sub the variables
        line = sub(r"{(.+?)}", ask_for_variable, lists[number][i])

        # check for conditions
        if line.startswith("["):
            # check for incomplete bracket
            if "]" not in line:
                exit(f"ERROR: Malformed condition: '{line}'")

            # remove the condition
            c = line[1 : line.index("]")]
            line = line[line.index("]") + 1 :]

            # include/exclude the condition line depending on the answer
            if not ask_for_condition(c):
                lists[number].pop(i)
                continue

        lists[number][i] = line
        i += 1

if len(selected_lists) == 0:
    exit("ERROR: no lists selected.")

# write to file
output_path = input("Output file path (defaults to TODO): ")
with open("TODO" if output_path == "" else output_path, "w") as f:
    for s in map(int, selected_lists):
        for line in lists[s]:
            f.write(line + "\n")

        # separate lists by an empty line
        f.write("\n")
